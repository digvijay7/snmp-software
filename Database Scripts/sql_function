CREATE OR REPLACE function get_entries(varchar, varchar, varchar) returns table (device_id int, client_id int,ts timestamp, label varchar, type int) as
$$
begin
create temp table if not exists real_from (id int, ts timestamp);
delete from real_from;
insert into real_from (select logs.client_id,max(logs.ts) from logs where logs.ts < to_timestamp($1,$3) and logs.type = 1 group by logs.client_id);
return query select logs.device_id,logs.client_id,logs.ts,logs.label,logs.type from logs left join real_from on logs.client_id = real_from.id and logs.ts >= real_from.ts and logs.ts <= to_timestamp($2,$3);
end
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION all_client_std(varchar,varchar,varchar)
RETURNS TABLE (device_id int,client_id int, fro timestamp, tro timestamp) AS
$$
DECLARE
  from_time timestamp;
  to_time timestamp;
  id logs.client_id%TYPE;
  access uid.access%TYPE;
BEGIN
  from_time := to_timestamp($1,$3);
  to_time := to_timestamp($2,$3);
  CREATE TEMP TABLE tmptable (device_id int, client_id int, fro timestamp, tro timestamp) ON COMMIT DROP;
  
  FOR id IN SELECT DISTINCT l.client_id from logs l
  WHERE l.ts >= from_time and l.ts <= to_time
  ORDER BY l.client_id
  LOOP
    -- Check if access greater than 0
    SELECT u.access into access from uid u where u.uid = id;
    IF access IS NOT NULL and access >= 1 THEN
      PERFORM  * FROM client_std($1,$2,$3,id);
    END IF;
  END LOOP;
  RETURN QUERY SELECT t.device_id as device_id,t.client_id as client_id, t.fro as from, t.tro as to FROM tmptable t;
END
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION device_last(d_id int)
RETURNS TABLE (device_id int, client_id int, fro timestamp, tro timestamp) AS
$$
DECLARE
  from_time varchar;
  to_time varchar;
  format varchar;
BEGIN
  format := 'YYYY-MM-DD HH24:MI:SS';
  from_time := to_char(now() - interval '1 hour',format);
  to_time := to_char(now(),format);
  RETURN QUERY SELECT * from device_std(from_time,to_time,format,d_id);
END
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION no_access_device_std(varchar, varchar, varchar,int) 
RETURNS TABLE (device_id int, client_id int, fro timestamp, tro timestamp) AS
$$
DECLARE
  row1 logs.client_id%TYPE;
  from_time timestamp;
  to_time timestamp;
  row2 logs%rowtype;
  prev_row logs%rowtype;
  id logs.device_id%TYPE;
  flag int;
BEGIN
  from_time := to_timestamp($1,$3);
  to_time := to_timestamp($2,$3);
  id := $4;
  flag := 0;

  CREATE TEMP TABLE IF NOT EXISTS tmptable ( device_id int, client_id int, fro timestamp, tro timestamp ) ON COMMIT DROP;

  FOR row2 IN SELECT l.device_id,l.client_id,l.ts,l.label,l.type
  FROM logs l LEFT JOIN uid u ON (l.client_id = u.uid)
  WHERE id = l.device_id and l.ts >= from_time and l.ts <= to_time
  ORDER BY l.client_id,l.ts 
  LOOP
    IF flag = 0 THEN
      flag := 1;
      prev_row := row2;
    END IF;
    IF prev_row.client_id != row2.client_id THEN
      INSERT INTO tmptable(device_id,client_id,fro) VALUES
      (id,prev_row.client_id,prev_row.ts);
      prev_row := row2;
    END IF;

    IF row2.type = 1 and prev_row.type = 2 THEN
      prev_row := row2;
    ELSIF row2.type = 2 and prev_row.type = 1 THEN
      INSERT INTO tmptable(device_id,client_id,fro,tro)
      VALUES (id,prev_row.client_id,prev_row.ts,row2.ts);
      flag := 0;
    ELSE
      -- Do nothing
      NULL;
    END IF;
  END LOOP;
  IF prev_row.type = 1 and flag = 1 THEN
    INSERT INTO tmptable(device_id,client_id,fro) VALUES
    (id,prev_row.client_id,prev_row.ts);
  END IF;
  RETURN QUERY SELECT t.device_id,t.client_id,t.fro,t.tro from tmptable t;
END
$$
LANGUAGE 'plpgsql';

  
CREATE OR REPLACE FUNCTION device_std(varchar, varchar, varchar,int) 
RETURNS TABLE (device_id int, client_id int, fro timestamp, tro timestamp) AS
$$
DECLARE
  row1 logs.client_id%TYPE;
  from_time timestamp;
  to_time timestamp;
  row2 logs%rowtype;
  prev_row logs%rowtype;
  id logs.device_id%TYPE;
  flag int;
BEGIN
  from_time := to_timestamp($1,$3);
  to_time := to_timestamp($2,$3);
  id := $4;
  flag := 0;

  CREATE TEMP TABLE IF NOT EXISTS tmptable ( device_id int, client_id int, fro timestamp, tro timestamp ) ON COMMIT DROP;

  FOR row2 IN SELECT l.device_id,l.client_id,l.ts,l.label,l.type
  FROM logs l LEFT JOIN uid u ON (l.client_id = u.uid)
  WHERE id = l.device_id and l.ts >= from_time and l.ts <= to_time and u.access >= 1
  ORDER BY l.client_id,l.ts 
  LOOP
    IF flag = 0 THEN
      flag := 1;
      prev_row := row2;
    END IF;
    IF prev_row.client_id != row2.client_id THEN
      INSERT INTO tmptable(device_id,client_id,fro) VALUES
      (id,prev_row.client_id,prev_row.ts);
      prev_row := row2;
    END IF;

    IF row2.type = 1 and prev_row.type = 2 THEN
      prev_row := row2;
    ELSIF row2.type = 2 and prev_row.type = 1 THEN
      INSERT INTO tmptable(device_id,client_id,fro,tro)
      VALUES (id,prev_row.client_id,prev_row.ts,row2.ts);
      flag := 0;
    ELSE
      -- Do nothing
      NULL;
    END IF;
  END LOOP;
  IF prev_row.type = 1 and flag = 1 THEN
    INSERT INTO tmptable(device_id,client_id,fro) VALUES
    (id,prev_row.client_id,prev_row.ts);
  END IF;
  RETURN QUERY SELECT t.device_id,t.client_id,t.fro,t.tro from tmptable t;
END
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION client_last(c_id int)
RETURNS TABLE (device_id int, client_id int, fro timestamp, tro timestamp) AS
$$
DECLARE
  from_time varchar;
  to_time varchar;
  format varchar;
  access int;
BEGIN
  format := 'YYYY-MM-DD HH24:MI:SS';
  from_time := to_char(now() - interval '1 hour',format);
  to_time := to_char(now(),format);
  SELECT u.access INTO access FROM uid u
  WHERE u.uid = c_id;
  IF access >= 1 THEN
    RETURN QUERY SELECT * from client_std(from_time,to_time,format,c_id);
  END IF;
END
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION all_count(varchar,varchar,varchar)
RETURNS TABLE (device_id int, batch varchar, count int) AS
$$
DECLARE
  from_time timestamp;
  to_time timestamp;
  d_id logs.device_id%TYPE;
BEGIN
  from_time := to_timestamp($1,$3);
  to_time := to_timestamp($2,$3);
  
  IF (to_time - from_time) > interval '30 minutes' THEN
    to_time := from_time + interval '30 minutes';
  END IF;

  CREATE TEMP TABLE IF NOT EXISTS count (device_id int, batch varchar, count int)
  ON COMMIT DROP;

  FOR d_id IN SELECT DISTINCT l.device_id FROM logs l
  WHERE l.ts >= from_time and l.ts <= to_time
  ORDER BY l.device_id
  LOOP
    -- INSERT INTO count(device_id,batch,count)
    PERFORM * FROM no_access_device_std($1,$2,$3,d_id);
  END LOOP;

  INSERT INTO count(device_id,batch,count)
  SELECT t.device_id,u.batch,count(*)
  FROM tmptable t left join uid u on(t.client_id = u.uid)
  GROUP BY t.device_id,u.batch;

  RETURN QUERY SELECT c.device_id,c.batch,c.count from count c;
END
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION client_std(varchar, varchar, varchar,int) 
RETURNS TABLE (device_id int, client_id int, fro timestamp, tro timestamp) AS
$$
DECLARE
  from_time timestamp;
  to_time timestamp;
  row2 logs%rowtype;
  prev_row logs%rowtype;
  id logs.client_id%TYPE;
  flag int;
  access uid.access%TYPE;
BEGIN
  from_time := to_timestamp($1,$3);
  to_time := to_timestamp($2,$3);
  id := $4;
  flag := 0;
  
  SELECT u.access INTO access FROM uid u
  WHERE u.uid = id;

  IF access = 0 THEN
    RETURN;
  END IF;

  CREATE TEMP TABLE IF NOT EXISTS tmptable ( device_id int, client_id int, fro timestamp, tro timestamp ) ON COMMIT DROP;
  
  FOR row2 IN SELECT * from logs l
  WHERE id = l.client_id and l.ts >= from_time and l.ts <= to_time
  ORDER BY l.ts 
  LOOP
    IF flag = 0 THEN
      flag := 1;
      prev_row := row2;
    END IF;
    
    IF row2.type = 1 THEN
      IF row2.device_id = prev_row.device_id THEN
        NULL;
      ELSE
        INSERT INTO tmptable(device_id,client_id,fro,tro) VALUES
        (prev_row.device_id,id,prev_row.ts,row2.ts);
        prev_row := row2;
      END IF;
    ELSIF row2.type = 2 THEN
      IF row2.device_id = prev_row.device_id THEN
        INSERT INTO tmptable(device_id,client_id,fro,tro) VALUES
        (prev_row.device_id,id,prev_row.ts,row2.ts);
        flag := 0;
      END IF;
    END IF;
  END LOOP;
  IF prev_row.type = 1 THEN
    INSERT INTO tmptable(device_id,client_id,fro) VALUES
    (prev_row.device_id,id,prev_row.ts);
  END IF;
  RETURN QUERY SELECT t.device_id,t.client_id,t.fro,t.tro from tmptable t;
END
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION get_live_table() RETURNS TABLE (c_id int, d_id int, tstamp timestamp) AS $$
	BEGIN
		RETURN QUERY SELECT client_id, device_id, ts 
		FROM live_table LEFT OUTER JOIN uid 
		ON (live_table.client_id=uid.uid)
		where uid.access >=1;
	END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION function_live_logs() RETURNS TRIGGER AS $trigger_live_logs$
	DECLARE
		res RECORD;
		foundFlag INTEGER :=0;
	BEGIN
		IF (NEW.type =1) THEN
			FOR res IN SELECT * FROM live_table where live_table.client_id = NEW.client_id LOOP
				foundFlag :=1;
				IF (NEW.device_id != res.device_id ) THEN
					UPDATE live_table SET device_id = NEW.device_id,ts = NEW.ts where client_id = NEW.client_id;
					END IF;
			END LOOP;
			IF (foundFlag =0) THEN
				INSERT INTO live_table VALUES(NEW.client_id, NEW.device_id, NEW.ts);
			END IF;
		END IF;
		IF (NEW.type =2) THEN
			FOR res IN SELECT * FROM live_table where live_table.client_id = NEW.client_id LOOP
				IF(NEW.device_id = res.device_id) THEN
					DELETE FROM live_table where client_id = NEW.client_id;
				END IF;
			END LOOP;
		END IF;
		RETURN NULL;
	END;
$trigger_live_logs$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_live_logs AFTER INSERT ON logs FOR EACH ROW EXECUTE PROCEDURE function_live_logs();
